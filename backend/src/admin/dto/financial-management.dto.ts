import { IsString, IsNumber, IsBoolean, IsOptional, IsEnum, IsArray, IsObject, IsDate, ValidateNested, Min, Max } from 'class-validator';
import { Type, Transform } from 'class-transformer';
import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';

// Enums
export enum ReportType {
  PROFIT_LOSS = 'profit_loss',
  BALANCE_SHEET = 'balance_sheet',
  CASH_FLOW = 'cash_flow',
  INCOME_STATEMENT = 'income_statement',
  BUDGET_VARIANCE = 'budget_variance',
  TAX_REPORT = 'tax_report',
  AUDIT_REPORT = 'audit_report',
  CUSTOM = 'custom',
}

export enum ReportPeriod {
  DAILY = 'daily',
  WEEKLY = 'weekly',
  MONTHLY = 'monthly',
  QUARTERLY = 'quarterly',
  YEARLY = 'yearly',
  CUSTOM = 'custom',
}

export enum ExpenseCategory {
  OPERATIONAL = 'operational',
  MARKETING = 'marketing',
  TECHNOLOGY = 'technology',
  PERSONNEL = 'personnel',
  FACILITIES = 'facilities',
  TRAVEL = 'travel',
  PROFESSIONAL_SERVICES = 'professional_services',
  UTILITIES = 'utilities',
  INSURANCE = 'insurance',
  OTHER = 'other',
}

export enum ExpenseStatus {
  PENDING = 'pending',
  APPROVED = 'approved',
  REJECTED = 'rejected',
  PAID = 'paid',
  CANCELLED = 'cancelled',
}

export enum PaymentMethodType {
  CREDIT_CARD = 'credit_card',
  DEBIT_CARD = 'debit_card',
  BANK_TRANSFER = 'bank_transfer',
  PAYPAL = 'paypal',
  STRIPE = 'stripe',
  DIRECT_DEBIT = 'direct_debit',
  CASH = 'cash',
  CHECK = 'check',
  OTHER = 'other',
}

export enum TaxType {
  VAT = 'vat',
  INCOME_TAX = 'income_tax',
  CORPORATION_TAX = 'corporation_tax',
  SALES_TAX = 'sales_tax',
  PROPERTY_TAX = 'property_tax',
  PAYROLL_TAX = 'payroll_tax',
  OTHER = 'other',
}

export enum AuditType {
  INTERNAL = 'internal',
  EXTERNAL = 'external',
  COMPLIANCE = 'compliance',
  TAX = 'tax',
  OPERATIONAL = 'operational',
  FINANCIAL = 'financial',
}

export enum AuditStatus {
  PLANNED = 'planned',
  IN_PROGRESS = 'in_progress',
  COMPLETED = 'completed',
  CANCELLED = 'cancelled',
  ON_HOLD = 'on_hold',
}

export enum AlertSeverity {
  LOW = 'low',
  MEDIUM = 'medium',
  HIGH = 'high',
  CRITICAL = 'critical',
}

export enum AlertStatus {
  ACTIVE = 'active',
  ACKNOWLEDGED = 'acknowledged',
  RESOLVED = 'resolved',
  DISMISSED = 'dismissed',
}

// Base Query DTO
export class FinancialQueryDto {
  @ApiPropertyOptional({ description: 'Page number for pagination' })
  @IsOptional()
  @IsNumber()
  @Min(1)
  @Type(() => Number)
  page?: number = 1;

  @ApiPropertyOptional({ description: 'Number of items per page' })
  @IsOptional()
  @IsNumber()
  @Min(1)
  @Max(100)
  @Type(() => Number)
  limit?: number = 10;

  @ApiPropertyOptional({ description: 'Search term' })
  @IsOptional()
  @IsString()
  search?: string;

  @ApiPropertyOptional({ description: 'Start date for filtering' })
  @IsOptional()
  @IsDate()
  @Type(() => Date)
  startDate?: Date;

  @ApiPropertyOptional({ description: 'End date for filtering' })
  @IsOptional()
  @IsDate()
  @Type(() => Date)
  endDate?: Date;

  @ApiPropertyOptional({ description: 'Sort field' })
  @IsOptional()
  @IsString()
  sortBy?: string;

  @ApiPropertyOptional({ description: 'Sort order', enum: ['asc', 'desc'] })
  @IsOptional()
  @IsEnum(['asc', 'desc'])
  sortOrder?: 'asc' | 'desc' = 'desc';
}

// Financial Report DTOs
export class FinancialReportDto {
  @ApiProperty({ description: 'Report type', enum: ReportType })
  @IsEnum(ReportType)
  type: ReportType;

  @ApiProperty({ description: 'Report period', enum: ReportPeriod })
  @IsEnum(ReportPeriod)
  period: ReportPeriod;

  @ApiProperty({ description: 'Report title' })
  @IsString()
  title: string;

  @ApiPropertyOptional({ description: 'Report description' })
  @IsOptional()
  @IsString()
  description?: string;

  @ApiProperty({ description: 'Report start date' })
  @IsDate()
  @Type(() => Date)
  startDate: Date;

  @ApiProperty({ description: 'Report end date' })
  @IsDate()
  @Type(() => Date)
  endDate: Date;

  @ApiPropertyOptional({ description: 'Additional metadata' })
  @IsOptional()
  @IsObject()
  metadata?: any;
}

export class FinancialReportResponseDto {
  @ApiProperty({ description: 'Report ID' })
  id: string;

  @ApiProperty({ description: 'Report type', enum: ReportType })
  type: ReportType;

  @ApiProperty({ description: 'Report period', enum: ReportPeriod })
  period: ReportPeriod;

  @ApiProperty({ description: 'Report title' })
  title: string;

  @ApiPropertyOptional({ description: 'Report description' })
  description?: string;

  @ApiProperty({ description: 'Report start date' })
  startDate: Date;

  @ApiProperty({ description: 'Report end date' })
  endDate: Date;

  @ApiProperty({ description: 'Report data' })
  data: any;

  @ApiProperty({ description: 'Generated by user' })
  generatedBy: string;

  @ApiProperty({ description: 'Generation timestamp' })
  generatedAt: Date;

  @ApiProperty({ description: 'Report status' })
  status: string;

  @ApiPropertyOptional({ description: 'Additional metadata' })
  metadata?: any;
}

// Revenue Analytics DTOs
export class RevenueAnalyticsDto {
  @ApiProperty({ description: 'Analytics period' })
  @IsString()
  period: string;

  @ApiProperty({ description: 'Total revenue amount' })
  @IsNumber()
  @Min(0)
  totalRevenue: number;

  @ApiProperty({ description: 'Recurring revenue amount' })
  @IsNumber()
  @Min(0)
  recurringRevenue: number;

  @ApiProperty({ description: 'One-time revenue amount' })
  @IsNumber()
  @Min(0)
  oneTimeRevenue: number;

  @ApiProperty({ description: 'Revenue growth percentage' })
  @IsNumber()
  revenueGrowth: number;

  @ApiProperty({ description: 'Average revenue per user' })
  @IsNumber()
  @Min(0)
  averageRevenuePerUser: number;

  @ApiProperty({ description: 'Revenue breakdown by source' })
  @IsObject()
  revenueBySource: any;

  @ApiProperty({ description: 'Revenue breakdown by category' })
  @IsObject()
  revenueByCategory: any;

  @ApiPropertyOptional({ description: 'Forecast data' })
  @IsOptional()
  @IsObject()
  forecastData?: any;
}

export class RevenueAnalyticsResponseDto {
  @ApiProperty({ description: 'Analytics ID' })
  id: string;

  @ApiProperty({ description: 'Analytics period' })
  period: string;

  @ApiProperty({ description: 'Total revenue amount' })
  totalRevenue: number;

  @ApiProperty({ description: 'Recurring revenue amount' })
  recurringRevenue: number;

  @ApiProperty({ description: 'One-time revenue amount' })
  oneTimeRevenue: number;

  @ApiProperty({ description: 'Revenue growth percentage' })
  revenueGrowth: number;

  @ApiProperty({ description: 'Average revenue per user' })
  averageRevenuePerUser: number;

  @ApiProperty({ description: 'Revenue breakdown by source' })
  revenueBySource: any;

  @ApiProperty({ description: 'Revenue breakdown by category' })
  revenueByCategory: any;

  @ApiPropertyOptional({ description: 'Forecast data' })
  forecastData?: any;

  @ApiProperty({ description: 'Creation timestamp' })
  createdAt: Date;

  @ApiProperty({ description: 'Last update timestamp' })
  updatedAt: Date;
}

// Expense Tracking DTOs
export class ExpenseTrackingDto {
  @ApiProperty({ description: 'Expense category', enum: ExpenseCategory })
  @IsEnum(ExpenseCategory)
  category: ExpenseCategory;

  @ApiPropertyOptional({ description: 'Expense subcategory' })
  @IsOptional()
  @IsString()
  subcategory?: string;

  @ApiProperty({ description: 'Expense description' })
  @IsString()
  description: string;

  @ApiProperty({ description: 'Expense amount' })
  @IsNumber()
  @Min(0)
  amount: number;

  @ApiProperty({ description: 'Currency code' })
  @IsString()
  currency: string;

  @ApiProperty({ description: 'Expense date' })
  @IsDate()
  @Type(() => Date)
  date: Date;

  @ApiPropertyOptional({ description: 'Vendor name' })
  @IsOptional()
  @IsString()
  vendor?: string;

  @ApiPropertyOptional({ description: 'Invoice number' })
  @IsOptional()
  @IsString()
  invoiceNumber?: string;

  @ApiPropertyOptional({ description: 'Expense tags' })
  @IsOptional()
  @IsArray()
  @IsString({ each: true })
  tags?: string[];

  @ApiPropertyOptional({ description: 'Attachment URLs' })
  @IsOptional()
  @IsArray()
  @IsString({ each: true })
  attachments?: string[];
}

export class ExpenseTrackingResponseDto {
  @ApiProperty({ description: 'Expense ID' })
  id: string;

  @ApiProperty({ description: 'Expense category', enum: ExpenseCategory })
  category: ExpenseCategory;

  @ApiPropertyOptional({ description: 'Expense subcategory' })
  subcategory?: string;

  @ApiProperty({ description: 'Expense description' })
  description: string;

  @ApiProperty({ description: 'Expense amount' })
  amount: number;

  @ApiProperty({ description: 'Currency code' })
  currency: string;

  @ApiProperty({ description: 'Expense date' })
  date: Date;

  @ApiPropertyOptional({ description: 'Vendor name' })
  vendor?: string;

  @ApiPropertyOptional({ description: 'Invoice number' })
  invoiceNumber?: string;

  @ApiProperty({ description: 'Expense status', enum: ExpenseStatus })
  status: ExpenseStatus;

  @ApiPropertyOptional({ description: 'Approved by user' })
  approvedBy?: string;

  @ApiPropertyOptional({ description: 'Approval timestamp' })
  approvedAt?: Date;

  @ApiPropertyOptional({ description: 'Expense tags' })
  tags?: string[];

  @ApiPropertyOptional({ description: 'Attachment URLs' })
  attachments?: string[];

  @ApiProperty({ description: 'Created by user' })
  createdBy: string;

  @ApiProperty({ description: 'Creation timestamp' })
  createdAt: Date;

  @ApiProperty({ description: 'Last update timestamp' })
  updatedAt: Date;
}

// Payment Method Configuration DTOs
export class PaymentMethodConfigDto {
  @ApiProperty({ description: 'Payment method type', enum: PaymentMethodType })
  @IsEnum(PaymentMethodType)
  type: PaymentMethodType;

  @ApiProperty({ description: 'Payment method name' })
  @IsString()
  name: string;

  @ApiPropertyOptional({ description: 'Payment method description' })
  @IsOptional()
  @IsString()
  description?: string;

  @ApiProperty({ description: 'Is payment method active' })
  @IsBoolean()
  isActive: boolean;

  @ApiProperty({ description: 'Payment method configuration' })
  @IsObject()
  configuration: any;

  @ApiProperty({ description: 'Fee structure' })
  @IsObject()
  fees: any;

  @ApiProperty({ description: 'Transaction limits' })
  @IsObject()
  limits: any;

  @ApiProperty({ description: 'Supported currencies' })
  @IsArray()
  @IsString({ each: true })
  supportedCurrencies: string[];
}

export class PaymentMethodConfigResponseDto {
  @ApiProperty({ description: 'Payment method ID' })
  id: string;

  @ApiProperty({ description: 'Payment method type', enum: PaymentMethodType })
  type: PaymentMethodType;

  @ApiProperty({ description: 'Payment method name' })
  name: string;

  @ApiPropertyOptional({ description: 'Payment method description' })
  description?: string;

  @ApiProperty({ description: 'Is payment method active' })
  isActive: boolean;

  @ApiProperty({ description: 'Payment method configuration' })
  configuration: any;

  @ApiProperty({ description: 'Fee structure' })
  fees: any;

  @ApiProperty({ description: 'Transaction limits' })
  limits: any;

  @ApiProperty({ description: 'Supported currencies' })
  supportedCurrencies: string[];

  @ApiProperty({ description: 'Creation timestamp' })
  createdAt: Date;

  @ApiProperty({ description: 'Last update timestamp' })
  updatedAt: Date;
}

// Tax Configuration DTOs
export class TaxConfigurationDto {
  @ApiProperty({ description: 'Tax type', enum: TaxType })
  @IsEnum(TaxType)
  type: TaxType;

  @ApiProperty({ description: 'Tax name' })
  @IsString()
  name: string;

  @ApiProperty({ description: 'Tax rate percentage' })
  @IsNumber()
  @Min(0)
  @Max(100)
  rate: number;

  @ApiPropertyOptional({ description: 'Tax description' })
  @IsOptional()
  @IsString()
  description?: string;

  @ApiProperty({ description: 'Tax jurisdiction' })
  @IsString()
  jurisdiction: string;

  @ApiProperty({ description: 'Is tax configuration active' })
  @IsBoolean()
  isActive: boolean;

  @ApiProperty({ description: 'Effective from date' })
  @IsDate()
  @Type(() => Date)
  effectiveFrom: Date;

  @ApiPropertyOptional({ description: 'Effective to date' })
  @IsOptional()
  @IsDate()
  @Type(() => Date)
  effectiveTo?: Date;

  @ApiProperty({ description: 'Tax rules and conditions' })
  @IsObject()
  rules: any;
}

export class TaxConfigurationResponseDto {
  @ApiProperty({ description: 'Tax configuration ID' })
  id: string;

  @ApiProperty({ description: 'Tax type', enum: TaxType })
  type: TaxType;

  @ApiProperty({ description: 'Tax name' })
  name: string;

  @ApiProperty({ description: 'Tax rate percentage' })
  rate: number;

  @ApiPropertyOptional({ description: 'Tax description' })
  description?: string;

  @ApiProperty({ description: 'Tax jurisdiction' })
  jurisdiction: string;

  @ApiProperty({ description: 'Is tax configuration active' })
  isActive: boolean;

  @ApiProperty({ description: 'Effective from date' })
  effectiveFrom: Date;

  @ApiPropertyOptional({ description: 'Effective to date' })
  effectiveTo?: Date;

  @ApiProperty({ description: 'Tax rules and conditions' })
  rules: any;

  @ApiProperty({ description: 'Creation timestamp' })
  createdAt: Date;

  @ApiProperty({ description: 'Last update timestamp' })
  updatedAt: Date;
}

// Financial Audit DTOs
export class FinancialAuditDto {
  @ApiProperty({ description: 'Audit type', enum: AuditType })
  @IsEnum(AuditType)
  type: AuditType;

  @ApiProperty({ description: 'Audit title' })
  @IsString()
  title: string;

  @ApiPropertyOptional({ description: 'Audit description' })
  @IsOptional()
  @IsString()
  description?: string;

  @ApiProperty({ description: 'Audit start date' })
  @IsDate()
  @Type(() => Date)
  startDate: Date;

  @ApiPropertyOptional({ description: 'Audit end date' })
  @IsOptional()
  @IsDate()
  @Type(() => Date)
  endDate?: Date;

  @ApiProperty({ description: 'Auditor name' })
  @IsString()
  auditor: string;
}

export class FinancialAuditResponseDto {
  @ApiProperty({ description: 'Audit ID' })
  id: string;

  @ApiProperty({ description: 'Audit type', enum: AuditType })
  type: AuditType;

  @ApiProperty({ description: 'Audit title' })
  title: string;

  @ApiPropertyOptional({ description: 'Audit description' })
  description?: string;

  @ApiProperty({ description: 'Audit status', enum: AuditStatus })
  status: AuditStatus;

  @ApiProperty({ description: 'Audit start date' })
  startDate: Date;

  @ApiPropertyOptional({ description: 'Audit end date' })
  endDate?: Date;

  @ApiProperty({ description: 'Auditor name' })
  auditor: string;

  @ApiProperty({ description: 'Audit findings' })
  findings: any[];

  @ApiProperty({ description: 'Audit recommendations' })
  recommendations: any[];

  @ApiProperty({ description: 'Risk level assessment' })
  riskLevel: string;

  @ApiPropertyOptional({ description: 'Compliance score' })
  complianceScore?: number;

  @ApiProperty({ description: 'Creation timestamp' })
  createdAt: Date;

  @ApiProperty({ description: 'Last update timestamp' })
  updatedAt: Date;
}

// Budget Planning DTOs
export class BudgetPlanningDto {
  @ApiProperty({ description: 'Budget name' })
  @IsString()
  name: string;

  @ApiPropertyOptional({ description: 'Budget description' })
  @IsOptional()
  @IsString()
  description?: string;

  @ApiProperty({ description: 'Budget year' })
  @IsNumber()
  @Min(2020)
  @Max(2030)
  year: number;

  @ApiPropertyOptional({ description: 'Budget quarter' })
  @IsOptional()
  @IsNumber()
  @Min(1)
  @Max(4)
  quarter?: number;

  @ApiPropertyOptional({ description: 'Department' })
  @IsOptional()
  @IsString()
  department?: string;

  @ApiProperty({ description: 'Budget category' })
  @IsString()
  category: string;

  @ApiProperty({ description: 'Budgeted amount' })
  @IsNumber()
  @Min(0)
  budgetedAmount: number;
}

export class BudgetPlanningResponseDto {
  @ApiProperty({ description: 'Budget ID' })
  id: string;

  @ApiProperty({ description: 'Budget name' })
  name: string;

  @ApiPropertyOptional({ description: 'Budget description' })
  description?: string;

  @ApiProperty({ description: 'Budget year' })
  year: number;

  @ApiPropertyOptional({ description: 'Budget quarter' })
  quarter?: number;

  @ApiPropertyOptional({ description: 'Department' })
  department?: string;

  @ApiProperty({ description: 'Budget category' })
  category: string;

  @ApiProperty({ description: 'Budgeted amount' })
  budgetedAmount: number;

  @ApiPropertyOptional({ description: 'Actual amount spent' })
  actualAmount?: number;

  @ApiPropertyOptional({ description: 'Budget variance' })
  variance?: number;

  @ApiPropertyOptional({ description: 'Variance percentage' })
  variancePercentage?: number;

  @ApiProperty({ description: 'Budget status' })
  status: string;

  @ApiPropertyOptional({ description: 'Approved by user' })
  approvedBy?: string;

  @ApiPropertyOptional({ description: 'Approval timestamp' })
  approvedAt?: Date;

  @ApiProperty({ description: 'Creation timestamp' })
  createdAt: Date;

  @ApiProperty({ description: 'Last update timestamp' })
  updatedAt: Date;
}

// Cash Flow Analysis DTOs
export class CashFlowAnalysisDto {
  @ApiProperty({ description: 'Analysis period' })
  @IsString()
  period: string;

  @ApiProperty({ description: 'Analysis start date' })
  @IsDate()
  @Type(() => Date)
  startDate: Date;

  @ApiProperty({ description: 'Analysis end date' })
  @IsDate()
  @Type(() => Date)
  endDate: Date;

  @ApiProperty({ description: 'Opening balance' })
  @IsNumber()
  openingBalance: number;

  @ApiProperty({ description: 'Closing balance' })
  @IsNumber()
  closingBalance: number;

  @ApiProperty({ description: 'Total cash inflow' })
  @IsNumber()
  @Min(0)
  totalInflow: number;

  @ApiProperty({ description: 'Total cash outflow' })
  @IsNumber()
  @Min(0)
  totalOutflow: number;

  @ApiProperty({ description: 'Net cash flow' })
  @IsNumber()
  netCashFlow: number;

  @ApiProperty({ description: 'Operating cash flow' })
  @IsNumber()
  operatingCashFlow: number;

  @ApiProperty({ description: 'Investing cash flow' })
  @IsNumber()
  investingCashFlow: number;

  @ApiProperty({ description: 'Financing cash flow' })
  @IsNumber()
  financingCashFlow: number;

  @ApiPropertyOptional({ description: 'Forecast data' })
  @IsOptional()
  @IsObject()
  forecastData?: any;
}

export class CashFlowAnalysisResponseDto {
  @ApiProperty({ description: 'Analysis ID' })
  id: string;

  @ApiProperty({ description: 'Analysis period' })
  period: string;

  @ApiProperty({ description: 'Analysis start date' })
  startDate: Date;

  @ApiProperty({ description: 'Analysis end date' })
  endDate: Date;

  @ApiProperty({ description: 'Opening balance' })
  openingBalance: number;

  @ApiProperty({ description: 'Closing balance' })
  closingBalance: number;

  @ApiProperty({ description: 'Total cash inflow' })
  totalInflow: number;

  @ApiProperty({ description: 'Total cash outflow' })
  totalOutflow: number;

  @ApiProperty({ description: 'Net cash flow' })
  netCashFlow: number;

  @ApiProperty({ description: 'Operating cash flow' })
  operatingCashFlow: number;

  @ApiProperty({ description: 'Investing cash flow' })
  investingCashFlow: number;

  @ApiProperty({ description: 'Financing cash flow' })
  financingCashFlow: number;

  @ApiPropertyOptional({ description: 'Forecast data' })
  forecastData?: any;

  @ApiProperty({ description: 'Creation timestamp' })
  createdAt: Date;

  @ApiProperty({ description: 'Last update timestamp' })
  updatedAt: Date;
}

// Financial Alert DTOs
export class FinancialAlertDto {
  @ApiProperty({ description: 'Alert type' })
  @IsString()
  type: string;

  @ApiProperty({ description: 'Alert severity', enum: AlertSeverity })
  @IsEnum(AlertSeverity)
  severity: AlertSeverity;

  @ApiProperty({ description: 'Alert title' })
  @IsString()
  title: string;

  @ApiProperty({ description: 'Alert message' })
  @IsString()
  message: string;

  @ApiPropertyOptional({ description: 'Alert threshold value' })
  @IsOptional()
  @IsNumber()
  threshold?: number;

  @ApiPropertyOptional({ description: 'Current value that triggered alert' })
  @IsOptional()
  @IsNumber()
  currentValue?: number;

  @ApiPropertyOptional({ description: 'Additional metadata' })
  @IsOptional()
  @IsObject()
  metadata?: any;
}

export class FinancialAlertResponseDto {
  @ApiProperty({ description: 'Alert ID' })
  id: string;

  @ApiProperty({ description: 'Alert type' })
  type: string;

  @ApiProperty({ description: 'Alert severity', enum: AlertSeverity })
  severity: AlertSeverity;

  @ApiProperty({ description: 'Alert title' })
  title: string;

  @ApiProperty({ description: 'Alert message' })
  message: string;

  @ApiProperty({ description: 'Alert status', enum: AlertStatus })
  status: AlertStatus;

  @ApiPropertyOptional({ description: 'Alert threshold value' })
  threshold?: number;

  @ApiPropertyOptional({ description: 'Current value that triggered alert' })
  currentValue?: number;

  @ApiProperty({ description: 'Triggered by user' })
  triggeredBy: string;

  @ApiProperty({ description: 'Trigger timestamp' })
  triggeredAt: Date;

  @ApiPropertyOptional({ description: 'Acknowledged by user' })
  acknowledgedBy?: string;

  @ApiPropertyOptional({ description: 'Acknowledgment timestamp' })
  acknowledgedAt?: Date;

  @ApiPropertyOptional({ description: 'Resolved by user' })
  resolvedBy?: string;

  @ApiPropertyOptional({ description: 'Resolution timestamp' })
  resolvedAt?: Date;

  @ApiPropertyOptional({ description: 'Additional metadata' })
  metadata?: any;
}

// Financial Dashboard Response DTO
export class FinancialDashboardResponseDto {
  @ApiProperty({ description: 'Total revenue' })
  totalRevenue: number;

  @ApiProperty({ description: 'Total expenses' })
  totalExpenses: number;

  @ApiProperty({ description: 'Net profit' })
  netProfit: number;

  @ApiProperty({ description: 'Profit margin percentage' })
  profitMargin: number;

  @ApiProperty({ description: 'Cash flow summary' })
  cashFlow: {
    inflow: number;
    outflow: number;
    net: number;
  };

  @ApiProperty({ description: 'Budget utilization' })
  budgetUtilization: {
    allocated: number;
    spent: number;
    remaining: number;
    utilizationRate: number;
  };

  @ApiProperty({ description: 'Revenue growth metrics' })
  revenueGrowth: {
    monthOverMonth: number;
    yearOverYear: number;
  };

  @ApiProperty({ description: 'Top expense categories' })
  topExpenseCategories: Array<{
    category: string;
    amount: number;
    percentage: number;
  }>;

  @ApiProperty({ description: 'Active financial alerts' })
  alerts: Array<{
    id: string;
    type: string;
    severity: AlertSeverity;
    message: string;
  }>;

  @ApiProperty({ description: 'Key performance indicators' })
  kpis: {
    customerAcquisitionCost: number;
    customerLifetimeValue: number;
    monthlyRecurringRevenue: number;
    churnRate: number;
  };

  @ApiProperty({ description: 'Financial trends data' })
  trends: {
    revenue: number[];
    expenses: number[];
    profit: number[];
  };

  @ApiProperty({ description: 'Last update timestamp' })
  lastUpdated: Date;
}