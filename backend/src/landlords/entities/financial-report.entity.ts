import { Entity, Column, PrimaryGeneratedColumn, CreateDateColumn, UpdateDateColumn, ManyToOne, JoinColumn } from 'typeorm';
import { ApiProperty } from '@nestjs/swagger';
import { Landlord } from './landlord.entity';
import { LandlordProperty } from './landlord-property.entity';

export enum ReportType {
  MONTHLY = 'monthly',
  QUARTERLY = 'quarterly',
  ANNUAL = 'annual',
  CUSTOM = 'custom',
  PROPERTY_SPECIFIC = 'property_specific',
  PORTFOLIO_SUMMARY = 'portfolio_summary',
  TAX_YEAR = 'tax_year',
  CASH_FLOW = 'cash_flow',
  PROFIT_LOSS = 'profit_loss',
  RENTAL_YIELD = 'rental_yield',
}

export enum ReportStatus {
  DRAFT = 'draft',
  GENERATING = 'generating',
  COMPLETED = 'completed',
  FAILED = 'failed',
  ARCHIVED = 'archived',
  SHARED = 'shared',
}

export enum ReportFormat {
  PDF = 'pdf',
  EXCEL = 'excel',
  CSV = 'csv',
  JSON = 'json',
  HTML = 'html',
}

@Entity('financial_reports')
export class FinancialReport {
  @ApiProperty()
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @ApiProperty()
  @Column('uuid')
  landlordId: string;

  @ManyToOne(() => Landlord, landlord => landlord.financialReports)
  @JoinColumn({ name: 'landlordId' })
  landlord: Landlord;

  @ApiProperty()
  @Column('uuid', { nullable: true })
  propertyId: string; // Null for portfolio-wide reports

  @ManyToOne(() => LandlordProperty, { nullable: true })
  @JoinColumn({ name: 'propertyId' })
  property: LandlordProperty;

  @ApiProperty()
  @Column({ nullable: true })
  reportReference: string;

  @ApiProperty()
  @Column()
  reportName: string;

  @ApiProperty({ enum: ReportType })
  @Column({
    type: 'varchar',
    
  })
  reportType: ReportType;

  @ApiProperty({ enum: ReportStatus })
  @Column({
    type: 'varchar',
    
    default: ReportStatus.DRAFT,
  })
  status: ReportStatus;

  @ApiProperty({ enum: ReportFormat })
  @Column({
    type: 'varchar',
    
    default: ReportFormat.PDF,
  })
  format: ReportFormat;

  // Report Period
  @ApiProperty()
  @Column()
  periodStart: Date;

  @ApiProperty()
  @Column()
  periodEnd: Date;

  @ApiProperty()
  @Column({ nullable: true })
  taxYear: string; // e.g., '2023-24'

  @ApiProperty()
  @Column({ nullable: true })
  financialYear: string; // e.g., 'FY2024'

  // Generation Information
  @ApiProperty()
  @Column({ nullable: true })
  generatedDate: Date;

  @ApiProperty()
  @Column({ nullable: true })
  generatedBy: string; // User ID

  @ApiProperty()
  @Column({ default: false })
  isAutoGenerated: boolean;

  @ApiProperty()
  @Column({ nullable: true })
  generationDuration: number; // Seconds

  // Revenue Summary
  @ApiProperty()
  @Column('decimal', { precision: 12, scale: 2, default: 0 })
  totalRentalIncome: number;

  @ApiProperty()
  @Column('decimal', { precision: 12, scale: 2, default: 0 })
  totalServiceCharges: number;

  @ApiProperty()
  @Column('decimal', { precision: 12, scale: 2, default: 0 })
  totalDeposits: number;

  @ApiProperty()
  @Column('decimal', { precision: 12, scale: 2, default: 0 })
  totalOtherIncome: number;

  @ApiProperty()
  @Column('decimal', { precision: 12, scale: 2, default: 0 })
  totalGrossIncome: number;

  // Expense Summary
  @ApiProperty()
  @Column('decimal', { precision: 12, scale: 2, default: 0 })
  totalMortgagePayments: number;

  @ApiProperty()
  @Column('decimal', { precision: 12, scale: 2, default: 0 })
  totalInsuranceCosts: number;

  @ApiProperty()
  @Column('decimal', { precision: 12, scale: 2, default: 0 })
  totalMaintenanceCosts: number;

  @ApiProperty()
  @Column('decimal', { precision: 12, scale: 2, default: 0 })
  totalManagementFees: number;

  @ApiProperty()
  @Column('decimal', { precision: 12, scale: 2, default: 0 })
  totalLegalCosts: number;

  @ApiProperty()
  @Column('decimal', { precision: 12, scale: 2, default: 0 })
  totalAccountingCosts: number;

  @ApiProperty()
  @Column('decimal', { precision: 12, scale: 2, default: 0 })
  totalUtilityCosts: number;

  @ApiProperty()
  @Column('decimal', { precision: 12, scale: 2, default: 0 })
  totalCouncilTax: number;

  @ApiProperty()
  @Column('decimal', { precision: 12, scale: 2, default: 0 })
  totalGroundRent: number;

  @ApiProperty()
  @Column('decimal', { precision: 12, scale: 2, default: 0 })
  totalServiceChargesPaid: number;

  @ApiProperty()
  @Column('decimal', { precision: 12, scale: 2, default: 0 })
  totalOtherExpenses: number;

  @ApiProperty()
  @Column('decimal', { precision: 12, scale: 2, default: 0 })
  totalExpenses: number;

  // Profitability
  @ApiProperty()
  @Column('decimal', { precision: 12, scale: 2, default: 0 })
  netRentalIncome: number;

  @ApiProperty()
  @Column('decimal', { precision: 12, scale: 2, default: 0 })
  operatingProfit: number;

  @ApiProperty()
  @Column('decimal', { precision: 12, scale: 2, default: 0 })
  netProfit: number;

  @ApiProperty()
  @Column('decimal', { precision: 5, scale: 2, default: 0 })
  profitMargin: number; // Percentage

  @ApiProperty()
  @Column('decimal', { precision: 5, scale: 2, default: 0 })
  grossYield: number; // Percentage

  @ApiProperty()
  @Column('decimal', { precision: 5, scale: 2, default: 0 })
  netYield: number; // Percentage

  @ApiProperty()
  @Column('decimal', { precision: 5, scale: 2, default: 0 })
  returnOnInvestment: number; // Percentage

  // Cash Flow Analysis
  @ApiProperty()
  @Column('decimal', { precision: 12, scale: 2, default: 0 })
  totalCashInflow: number;

  @ApiProperty()
  @Column('decimal', { precision: 12, scale: 2, default: 0 })
  totalCashOutflow: number;

  @ApiProperty()
  @Column('decimal', { precision: 12, scale: 2, default: 0 })
  netCashFlow: number;

  @ApiProperty()
  @Column('decimal', { precision: 12, scale: 2, default: 0 })
  averageMonthlyCashFlow: number;

  @ApiProperty()
  @Column('decimal', { precision: 12, scale: 2, default: 0 })
  cumulativeCashFlow: number;

  // Property Performance
  @ApiProperty()
  @Column('json', { nullable: true })
  propertyPerformance: {
    propertyId: string;
    address: string;
    rentalIncome: number;
    expenses: number;
    netIncome: number;
    yield: number;
    occupancyRate: number;
    daysVacant: number;
  }[];

  // Occupancy Analysis
  @ApiProperty()
  @Column('decimal', { precision: 5, scale: 2, default: 0 })
  averageOccupancyRate: number; // Percentage

  @ApiProperty()
  @Column({ default: 0 })
  totalVacantDays: number;

  @ApiProperty()
  @Column('decimal', { precision: 12, scale: 2, default: 0 })
  lostRentalIncome: number;

  @ApiProperty()
  @Column({ default: 0 })
  tenantTurnover: number;

  @ApiProperty()
  @Column('decimal', { precision: 12, scale: 2, default: 0 })
  voidCosts: number;

  // Maintenance Analysis
  @ApiProperty()
  @Column({ default: 0 })
  totalMaintenanceRequests: number;

  @ApiProperty()
  @Column('decimal', { precision: 12, scale: 2, default: 0 })
  averageMaintenanceCost: number;

  @ApiProperty()
  @Column('decimal', { precision: 5, scale: 2, default: 0 })
  maintenanceCostPercentage: number; // Of rental income

  @ApiProperty()
  @Column({ default: 0 })
  emergencyRepairs: number;

  @ApiProperty()
  @Column('decimal', { precision: 12, scale: 2, default: 0 })
  emergencyRepairCosts: number;

  // Tax Information
  @ApiProperty()
  @Column('decimal', { precision: 12, scale: 2, default: 0 })
  taxableIncome: number;

  @ApiProperty()
  @Column('decimal', { precision: 12, scale: 2, default: 0 })
  totalDeductions: number;

  @ApiProperty()
  @Column('decimal', { precision: 12, scale: 2, default: 0 })
  estimatedTaxLiability: number;

  @ApiProperty()
  @Column('decimal', { precision: 12, scale: 2, default: 0 })
  capitalAllowances: number;

  @ApiProperty()
  @Column('decimal', { precision: 12, scale: 2, default: 0 })
  mortgageInterestRelief: number;

  // Detailed Breakdowns
  @ApiProperty()
  @Column('json', { nullable: true })
  monthlyBreakdown: {
    month: string;
    income: number;
    expenses: number;
    netIncome: number;
    occupancyRate: number;
  }[];

  @ApiProperty()
  @Column('json', { nullable: true })
  expenseBreakdown: {
    category: string;
    amount: number;
    percentage: number;
    transactions: number;
  }[];

  @ApiProperty()
  @Column('json', { nullable: true })
  incomeBreakdown: {
    source: string;
    amount: number;
    percentage: number;
    transactions: number;
  }[];

  // Comparisons and Benchmarks
  @ApiProperty()
  @Column('json', { nullable: true })
  previousPeriodComparison: {
    metric: string;
    currentValue: number;
    previousValue: number;
    change: number;
    changePercentage: number;
  }[];

  @ApiProperty()
  @Column('json', { nullable: true })
  marketBenchmarks: {
    metric: string;
    portfolioValue: number;
    marketAverage: number;
    percentile: number;
  }[];

  // Key Performance Indicators
  @ApiProperty()
  @Column('json', { nullable: true })
  kpis: {
    name: string;
    value: number;
    unit: string;
    trend: 'up' | 'down' | 'stable';
    target: number;
    status: 'good' | 'warning' | 'poor';
  }[];

  // Recommendations and Insights
  @ApiProperty()
  @Column('simple-array', { nullable: true })
  recommendations: string[];

  @ApiProperty()
  @Column('simple-array', { nullable: true })
  insights: string[];

  @ApiProperty()
  @Column('simple-array', { nullable: true })
  alerts: string[];

  @ApiProperty()
  @Column('simple-array', { nullable: true })
  opportunities: string[];

  // Report Configuration
  @ApiProperty()
  @Column('json', { nullable: true })
  reportConfig: {
    includeCharts: boolean;
    includeComparisons: boolean;
    includeRecommendations: boolean;
    includeTaxAnalysis: boolean;
    includePropertyDetails: boolean;
    customSections: string[];
  };

  // File and Sharing
  @ApiProperty()
  @Column({ nullable: true })
  fileUrl: string;

  @ApiProperty()
  @Column({ nullable: true })
  fileName: string;

  @ApiProperty()
  @Column({ nullable: true })
  fileSize: number; // Bytes

  @ApiProperty()
  @Column({ default: false })
  isShared: boolean;

  @ApiProperty()
  @Column('simple-array', { nullable: true })
  sharedWith: string[]; // Email addresses

  @ApiProperty()
  @Column({ nullable: true })
  shareToken: string;

  @ApiProperty()
  @Column({ nullable: true })
  shareExpiryDate: Date;

  @ApiProperty()
  @Column({ default: 0 })
  downloadCount: number;

  @ApiProperty()
  @Column({ nullable: true })
  lastDownloaded: Date;

  // Automation and Scheduling
  @ApiProperty()
  @Column({ default: false })
  isRecurring: boolean;

  @ApiProperty()
  @Column({ nullable: true })
  recurringFrequency: string; // monthly, quarterly, annually

  @ApiProperty()
  @Column({ nullable: true })
  nextGenerationDate: Date;

  @ApiProperty()
  @Column({ default: false })
  autoEmail: boolean;

  @ApiProperty()
  @Column('simple-array', { nullable: true })
  emailRecipients: string[];

  // Error Handling
  @ApiProperty()
  @Column('text', { nullable: true })
  errorMessage: string;

  @ApiProperty()
  @Column({ nullable: true })
  errorDate: Date;

  @ApiProperty()
  @Column({ default: 0 })
  retryCount: number;

  @ApiProperty()
  @Column({ nullable: true })
  lastRetryDate: Date;

  @ApiProperty()
  @Column('text', { nullable: true })
  notes: string;

  @ApiProperty()
  @Column({ default: true })
  isActive: boolean;

  @ApiProperty()
  @CreateDateColumn()
  createdAt: Date;

  @ApiProperty()
  @UpdateDateColumn()
  updatedAt: Date;
}
